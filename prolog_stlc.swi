/**
# ここで使う記法について
*/

/**
## 記法の一覧

```
  λx.y     tm_abs(x, y)       型注釈のないλ抽象
  λx:T.y   tm_abs(x:T, y)     型注釈のあるλ抽象 (「:」は中置記法)
  f x      tm_app(f, x)       適用
  x        tm_var(x)          変数の参照
  t1->t2   t1->t2             関数型 (中置記法)
  Bool     ty_bool            型定数
  True     tm_true            定数
  False    tm_false           定数
```

## 変換の例

### 一般的な記法

```
  λa:Bool. λ:b:Bool->Bool. b (b a)
```

### ここで使う記法

```
tm_abs(a:ty_Bool,
  tm_abs(b:ty_Bool->ty_Bool,
    tm_app(tm_var(b),
           tm_app(tm_var(b), tm_var(a)))))
*/  

/**
型の注釈で使う「:」と、そのなかでの関数型を示す「->」は、「,」より優先度が高いものとする。
*/
  
:- op(600, xfx, :).                         % 例、x : T
:- op(500, xfy, ->).                        % 例、Tx->Ty

/**
# 型検査のプログラム

  第2引数の「型」は、入力でも出力でもよい。たとえば正しい型を指定して
  実行すると、結果は「成功」になる（型検査）。間違った型を指定したら結
  果は「失敗」になる。第1引数に与えられた式がもともと型付けできなけれ
  ば、このときも、結果は「失敗」になる。
*/

typeof(E, T) :-
        typeof([], E, T).
  
typeof(CTX, tm_var(Tm), T) :-
        getTypeFromContext(CTX, Tm, T).
typeof(CTX, tm_abs(Tm1:TyT1, Tm2), TyT1 -> TyT2) :- % 型注釈のある場合
        typeof([Tm1:TyT1|CTX], Tm2, TyT2).
typeof(CTX, tm_abs(Tm1, Tm2), TyT1 -> TyT2) :- % 型注釈のない場合
        typeof([Tm1:TyT1|CTX], Tm2, TyT2).
typeof(CTX, tm_app(Tm1, Tm2), Ty12) :-
        typeof(CTX, Tm1, Ty11 -> Ty12),
        typeof(CTX, Tm2, Ty11).
typeof(CTX, tm_true, ty_Bool).        
typeof(CTX, tm_false, ty_Bool).
typeof(CTX, tm_if(T1, T2, T3), TyT2) :-
        typeof(CTX, T1, ty_Bool),
        typeof(CTX, T2, TyT12),
        typeof(CTX, T3, TyT12).

getTypeFromContext(CTX, Tm, TA) :-
        member(Tm : TB, CTX),               % CUTをとった！
        unify_with_occurs_check(TA, TB).    % (*1)

/*
(*1)
  Occurs Check のもとで、TA=TBを実行する。

(*2)
  同名の「別の」λ変数を探さないよう、memberは最初のひとつだけに制限する。
*/



/**
## 実行例
*/

/**
### 型付けできない例

型付けできないことで有名な例、「λx.x x」 である。
*/
go23 :-
        typeof(tm_abs(x,
                      tm_app(tm_var(x), tm_var(x))),
               T).

/**
型付けできないのが正しいので、これは「失敗」で終了する。

しかし、getTypeFromContextのOccurs Checkを外す(unify_with_occurs_check(TA, TB)
を TA = TBに書き換える)と間違った型を返す。これは以下の理由による。

λx.x x の本体 (x x) の全体の型をT1、二番目のxの型をTxとする。
すると、一番目のxの型はTx->T1になるが、これもTxであるはずだから、Tx = Tx->T1 になる。
つまり、xの型は Tx かつ Tx->T1 になってしまい、これは型としておかしい。

しかしながら、Prologで（実行速度を優先して、省略時解釈のまま）Occurs Checkを行わ **ない** と、
これを「おかしい」と判断されないため、このおかしいまま、λx.x x の型として以下の奇妙な結果を返す。

  (Tx->T1)->T1、ただし Tx=Tx->T1

Occurs Check をおこなうと、Tx = Tx->T1 は「おかしい」と判断され「失敗」になる。
結果としてtypeof全体が「失敗」になる。
*/

/**
### ソフトウェアの基礎（文献2.) のサンプル

λa:bool.λb:bool->bool.(b (b a)) : bool -> (bool -> bool) -> bool

これは型付けできる例である。
  */
go24 :-
        Tm = tm_abs(a : ty_Bool,
                    tm_abs(b : ty_Bool -> ty_Bool,
                           tm_app(tm_var(b),
                                  tm_app(tm_var(b), tm_var(a))))),
        Ty = ty_Bool -> (ty_Bool -> ty_Bool) -> ty_Bool,
        typeof(Tm, Ty).                     % 型検査

go24(Ty) :-
        Tm = tm_abs(a : ty_Bool,
                    tm_abs(b : ty_Bool -> ty_Bool,
                           tm_app(tm_var(b),
                                  tm_app(tm_var(b), tm_var(a))))),
        typeof(Tm, Ty).                     % 型推論


go241 :-
        Tm = tm_abs(a : _,
                    tm_abs(b : _,
                           tm_app(tm_var(b),
                                  tm_app(tm_var(b), tm_var(a))))),
        Ty = ty_Bool -> (ty_Bool -> ty_Bool) -> ty_Bool,
        typeof(Tm, Ty).                     % 型検査

go241(Ty) :-
        Tm = tm_abs(a : _,
                    tm_abs(b : _,
                           tm_app(tm_var(b),
                                  tm_app(tm_var(b), tm_var(a))))),
        typeof(Tm, Ty).                     % 型推論


/**
# 参考文献

1. Benjamin C. Pierce、住井 監訳「型システム入門 プログラミング言語と型の理論」オーム社
2. Benjamin C. Pierce他、梅村他訳「ソフトウエアの基礎」、http://proofcafe.org/sf/
3. SWI-Prolog、http://www.swi-prolog.org/
4. GNU Prolog、http://www.gprolog.org/
*/  
                                                              
/* end */
/*
typeof(_, cons, ty_Bool->ty_List->ty_List).
typeof(_, nil, ty_List).
go(T) :-
        Tm1 = tm_abs(f:ty_Bool->ty_List,
                    tm_abs(x:ty_Bool, tm_app(tm_var(f), tm_var(x)))),
        Tm2 = tm_abs(x:ty_Bool, tm_app(tm_app(cons, tm_var(x)), nil)),
        Tm = tm_app(tm_app(Tm1, Tm2), tm_true),
        typeof(Tm, T).
*/

%% SFのサンプル
go0 :-                                      % true
        typeof([],
                 tm_abs(a : ty_Bool, tm_var(a)),
                 ty_Bool -> ty_Bool).

go1 :-                                      % true
        typeof([],
                 tm_abs(a : ty_Bool,
                        tm_abs(b : ty_Bool -> ty_Bool,
                               tm_app(tm_var(b),
                                      tm_app(tm_var(b), tm_var(a))))),
                 ty_Bool -> (ty_Bool -> ty_Bool) -> ty_Bool).

go2 :-                                      % false
        typeof([],
                 tm_abs(a : ty_Bool,
                        tm_abs(b : ty_Bool,
                               tm_app(tm_var(a), tm_var(b)))),
                 _).
%% いつもの例、失敗する。
go3 :-                                      % false
        typeof([],
                 tm_abs(x,
                        tm_app(tm_var(x), tm_var(x))),
                 T),
        write(T).
%% member_with_occurs_check のコメントを参照のこと。
go31 :-                                     % false
        typeof([],
                 tm_abs(x,
                        tm_abs(x,
                               tm_app(tm_var(x), tm_var(x)))),
                 T),
        write(T).

%% TaPLのサンプル
go4 :-                                      % TaPL 例22.2.2
        G = [f : X, a : Y],
        typeof(G, tm_app(tm_var(f), tm_var(a)), T),
        write([G, T]).
%% [f : Y -> Z, a : Y], T=Z

go5 :-                                      % TaPL 演習22.2.3
        typeof([],
                 tm_abs(x : X,
                        tm_abs(y : Y,
                               tm_abs(z : Z,
                                      tm_app(tm_app(tm_var(x), tm_var(z)),
                                             tm_app(tm_var(y), tm_var(z)))))),
                 T),
        write([[X,Y,Z], T]).
%% X=A->B->C, Y=A->B, Z=A, T=(A->B->C)->(A-B)->A->C

%% SFの練習問題
go6 :-                                      % true
        typeof([a : S],
                 tm_app(tm_abs(b : ty_Bool -> ty_Bool,
                               tm_var(b)),
                        tm_var(a)),
                 S),
        write(S).                           % Bool->Bool

go71 :-                                     % true
        typeof([],
                 tm_abs(b : B->B->B,
                        tm_abs(a:B,
                               tm_app(tm_var(b), tm_var(a)))),
                 T),
        write([B, T]).                      % T=(B->B->B)->B->B->B

go72 :-                                     % true.
        typeof([],
                 tm_abs(a : A->B,
                        tm_abs(b : B->C,
                               tm_abs(c : A,
                                      tm_app(tm_var(b),
                                             tm_app(tm_var(a), tm_var(c)))))),
                 T),
        write(T).

go73 :-                                     % true.
        typeof([a : S, b : U],
                 tm_abs(c : A, tm_app(tm_var(a),
                                      tm_app(tm_var(b), tm_var(c)))),
                 T),
        write([S, U, A, T]).

go74 :-                                     % true.
        typeof([a : S],
                 tm_abs(b : A, tm_app(tm_var(a), tm_app(tm_var(a), tm_var(b)))),
                 T),
        write([S, A, T]).                   % S=A->A, T=A->A

go75 :-                                     % fail
        typeof([a : S],
                 tm_app(tm_var(a), tm_abs(c : U, tm_app(tm_var(c), tm_var(a)))),
                 T),
        write([S, U, T]).


go_s0 :-
        typeof(tm_abs(b:ty_Bool->ty_Nat,
                      tm_abs(a:ty_Bool,
                             tm_app(tm_var(b), tm_var(a)))),
               T),
        write(T).

go_s01 :-
        typeof(tm_abs(b:ty_Bool->ty_Nat,
                      tm_abs(a:ty_Nat,
                             tm_app(tm_var(b), tm_var(a)))),
               T),
        write(T).

go_s11 :-
        typeof(tm_abs(b:ty_Bool->ty_Nat,
                      tm_abs(a,
                             tm_app(tm_var(b), tm_var(a)))),
               T),
        write(T).

go_s1 :-
        typeof(tm_abs(b,
                      tm_abs(a:ty_Bool,
                             tm_app(tm_var(b), tm_var(a)))),
               T),
        write(T).

go_s2 :-
        typeof(tm_abs(b,
                      tm_abs(a,
                             tm_app(tm_var(b), tm_var(a)))),
               (ty_Bool->ty_Nat)->ty_Bool->ty_Nat),
        write(T).

go_s5 :-
        typeof(tm_abs(b,
                      tm_abs(a,
                             tm_app(tm_var(b), tm_var(a)))),
               T),
        write(T).
