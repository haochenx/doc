Prologでλ→の型検査のプログラムを書いてみた「だけ」の話

2016_夏

@suharahiromichi


1. 概要

Prologでλ→の型検査のプログラムを書いてみた。
それ「だけ」で、型検査と型付け のどちらにも使える。

キーワード：

Prolog, λ式, λ→, STLC, TAPL
型システム、型検査、型推論、型付け



2. 要旨

型検査や型付けにおいて、その過程で、コンテキストから変数の型を取り出す
操作が必要になる。

- 通常のλ式では、連想リストの検索
- de Bruijn Indexと使い場合は、(0から始まる)配列のアクセス

これらを実装すれば、どのような言語でも、型付け・型検査のプロラムは書け
る。

Prologのもつ「双方向性」によって、型検査を実装するだけで、同じコードで
型付け（型推論）も行うことができる。

例えば、λb.λa.b a に対して、

(1) λb:Bool->Nat.λa:Bool.b a の型は、(Bool->Nat)->Bool->Nat か？
    答え true.

(2) λb:Bool->Nat.λa:Bool.b a の型は、(Bool->Nat)->Nat->Bool か？
    答え false.
    
(2) λb:Bool->Nat.λa:Bool.b a の型は？
    答え (Bool->Nat)->Bool->Nat

(3) λb:Bool->Nat.λa.b a の型は？
    答え (Bool->Nat)->Bool->Nat

(4) λb.λa:Bool.b a の型は？
    答え (Bool->_G1167)->Bool->_G1167

(5) λb.λa.b a の型は
    答え (_G1163->_G1164)->_G1163->_G1164

(6) λb.λa.b a の型は、(Bool->Nat)->Bool->Nat か？
    答え true.

(7) λb.λa.b a の型は、(Bool->Nat)->Nat->Bool か？
    答え false.

(8) λb.λa.b a の型は、(Nat->Bool)->Nat->Bool か？
    答え true.


(9) λb:Bool->Nat.λa:Nat.b a の型は？
    答え false. （型は決まらない）



2. Prolog とは

(1) 第一階述語論理（注）の定理の証明をプログラムの実行とみなす言語
    （注：ホーン節とよばれるサブセット）
    定理証明系と見たとき、健全だが完全ではない。
    （深さ優先探索をするため、探索が止まらない場合があることなど）

(2) ユニフィケーションとバックトラックに基づく言語である。これにより、
    「双方向性」を実現する。

    ユニフィケーションは述語の「呼び出し時」（通常の言語における実引数
    と仮引数とのバインディング）および、「=」組込み「述語」の実行時に
    おきる。ユニフィケーションできなければ、述語呼び出しおよび「=」述
    語が「失敗」する。

(3) 単に Prolog といったとき、ISO標準 Prolog (DEC-10 Prolog または
    Edinburgh Prolog の後継言語・処理系) を指す。今回は副作用は使用し
    ない。

(4) 処理系の例：
    SWI-Prolog (アムステルダム大学, アムステルダム自由大学)
    GNU Prolog (Daniel Diaz (パリ第1大学))
    AZ-Prolog  (ソフネック株式会社、個人と教育・研究機関は無償利用可能)



2. 用語と表記について

   定数 ：      小文字から始まる。または、数値（ここでは整数のみ）。

   変数 ：      大文字または「_」から始まる。
               「_」から始まる語は、
                    ソースコードでは、ワイルドカード。
                    出力では未定変数で、値を決定できなかったことを示す。例:_G1167。
                        ただし、同じ値は同じ名前（番号）になる。
   
   項   ：       f(x, Y, z)

   述語： だいたい常識的な意味とおり。第一階述語論理なので、p(X, Y) の
                 pは、定数であること。また、口語では「述語p」と言うこ
                 ともある。

   関数： スコーレム関数。f(X, Y) のfは、データ構造のコンストラクタで
                あり、ユニフィケーションの対象である。fは定数であること。
   
   節：        P :- Q, R.       (P :- true. は P. と書く)
   ゴール：    ?- P, Q.

   リスト：      [X, y, z]
                 [x y | Z]      (OCaml x :: y :: Z)
                 []

   X = Y :       変数XとYがユニフィケーションする。(「X = Y」は組込み述語）。

   true         常に成功する、つまり真である述語。
   false        常に失敗する、つまり偽である述語。
   fail         常に失敗する、つまり偽である述語。falseと同じ。
   
   予約語はない。trueやfailは組込み述語。

   Prolog のコメント    %から行末 または /* */で囲まれる範囲。
   

3. 連想リストの探索

連想リストのキー A に対する値 T を返す。
連想リストの要素は、「:」で区切ったタプル (KEY : VAL) とする。


3.1 OCaml では

let rec assoc a l =
  match l with
    | []           -> error    (* エラー *)
    | (a : t) :: _ -> t
    | _       :: l -> assoc a l


3.2 Prolog では

(あ）素朴な書き換え

assoc(A, [(A : T) | _], T).
assoc(A, [_       | L], T) :- assoc(A, L, T).

(0) 値を返すため 3引数になる。
(1) エラー（falseになる節）は書かない。条件が満たされなければ失敗
    （fail) すなわち、論理値として偽(false)とみなす。
(2) ユニフィケーションによる双方向性がある。Aが変数なら、変数に一致し
    た結果をセットして返す。次節で述べる。

（い) これは、2引数にできる。
      ひとつの引数の中でもユニフィケーションするから。…

assoc2((A : T), [(A : T) | _]).
assoc2((A : T), [_       | L]) :- assoc2((A : T), L).


（う）(A : T) はまとめられる。

assoc2(X, [X | _]).
assoc2(X, [_ | L]) :- assoc2(X, L).


（え）実は組込み述語がある。Xがリストの要素に含まれるか。

member(X, [X | _]).
member(X, [_ | L]) :- member(X, L).



4. memberの双方向性とは

(1) キーbの値は2か？

   ?- member((b : 2), [(a : 1), (b : 2), (c : 3)]).
   true.

(2) キーbの値は1か？

   ?- member((b : 1), [(a : 1), (b : 2), (c : 3)]).
   false.

(3) キーbの値は？

   ?- member((b : A), [(a : 1), (b : 2), (c : 3)]).
   A = 2
   true.

(4) 値が決まっていない場合、キーbが値2か？
   ?- member((b : 2), [(a : 1), (b : Y), (c : 3)]).
   Y = 2
   true.

(5) 値が決まっていない場合、キー値は？
   ?- member((b : A), [(a : 1), (b : Y), (c : 3)]).
   A = Y
   true.


注意：(4)や(5)の場合、コンテキストが書き換えられる、と考えてもよいが、
Prolog自体には副作用は無いため、コンテキストの変数の指す（引き回される）
リスト上でユニフィケーションの結果値が設定される。グローバルなデータを
書き換えるようなデータベース処理ではない。


補足説明：キーの重複があった場合、バックトラックによって複数解をもとめ
てしまう。ただし、今回の話題ではそれは起きないため、省略する。


5. 双方向のユニフィケーション

述語呼び出し時の引数の結合、および、 組込み述語「=」の両辺の間で、双方
向にユニフィケーションがおきる。

引数に「入力」と「出力」の区別がない。「=」を代入とみなしたとき、左辺
と右辺の区別がない。さらに、変数と定数を混ぜ合わせててもよい。

[1, Y, 3] = [X, 2, Z] の結果は X は 1、Y は 2、 Z は 3 になる。

f(X) = X は、f(f(f(f(f(f....))))) になる。

Occurs Check が必要になる。「X = Y」の代わりに、
unify_with_occurs_check(X, Y) を使うことで、このようなユニフィケーショ
ンを禁止する。失敗させる。

（set_prolog_flag(occurs_check, true). を実行することで、すべてのユニ
フィケーションでOccurs Checkをおこなうことができる。ただし、オーバーヘッ
ドが増える。



8. Prolog のgetTypeFromContext

memberの双方向性を使って書ける。

getTypeFromContext(CTX, X, T) :-     /* だめだめ */
    member((X : T), CTX).               /* だめだめ */


型の「ループ」の問題：

λx.x x の本体 (x x) の全体の型をT1、二番目のxの型をTxとする。
すると、一番目のxの型はTx->T1になるが、これもTxであるはずだから、Tx = Tx->T1 になる。
つまり、xの型は Tx かつ Tx->T1 になってしまい、これは型としておかしい。

対策：Occures Check を入れる。型としておかしいなら失敗とすればよい。

getTypeFromContext(CTX, X, T2) :-
    member((X : T1), CTX), !,
    unify_with_occurs_check(T1, T2).



9. TAPLの typeof を移植する。

型付け対象の項：
tm_var
tm_abs
tm_app
tm_true
tm_false
tm_zero

型：
ty_Bool
ty_Nat
->

型検査（型付け）プログラム：

typeof(E, T) :-
        typeof([], E, T).
  
typeof(CTX, tm_var(Tm), T) :-
        getTypeFromContext(CTX, Tm, T).
typeof(CTX, tm_abs((Tm1 : TyT1), Tm2), TyT1 -> TyT2) :- % 型注釈のある場合
        typeof([(Tm1 : TyT1) | CTX], Tm2, TyT2).

typeof(CTX, tm_abs(Tm1, Tm2), TyT1 -> TyT2) :- % (※）型注釈のない場合
        typeof([(Tm1 : TyT1) | CTX], Tm2, TyT2).

typeof(CTX, tm_app(Tm1, Tm2), Ty12) :-
        typeof(CTX, Tm1, Ty11 -> Ty12),
        typeof(CTX, Tm2, Ty11).
typeof(CTX, tm_true, ty_Bool).        
typeof(CTX, tm_false, ty_Bool).
typeof(CTX, tm_if(T1, T2, T3), TyT2) :-
        typeof(CTX, T1, ty_Bool),
        typeof(CTX, T2, TyT12),
        typeof(CTX, T3, TyT12).


※の箇所がTAPLと異なる。型付け対象において、λの次の変数（λ変数）の型
注釈を省くことができる。Tm1の型である TyT1 は型付け対象の式に現れない。
その場合でも、コンテキストに設定し、型（の一部）として返すことで、処理
を継続する。ユニフィケーションによっていつか型が決まるか、最後まで決ま
らない。その場合でも、同じ型が同じ変数にユニフィケーションされる。




10. 実行例





11. de Bruijn Index を使う場合

de Bruijn Index を使う場合、コンテキストは配列になる。
（de Bruijn Index として0から使う場合、0から始まる配列になる。)

nth0(N, L, T) は、リストを0始まりの配列とみなして、(0から数えて)N番め
の要素を返す。memberをnth0に置き換える。

getTypeFromContext((X : T1), CTX) :-
    nth0(X, CTX, T2),
    unify_with_occurs_check(T1, T2).



12. Sytem F への拡張



13. ホーン節とPrologとの関係

論理式は、節をORで結んだもの。
ホーン節は、確定節とゴール節からなる。これ以外のものはホーン節ではない。
確定節は、原始論理式ををORで結んだもので、「否定でないもが一つ」のもの。
ゴール節は、原始論理式ををORで結んだもので、「否定でないもない」のもの。

        
論理式 ：  L1 ∨ ... ∨ Lm                  、ここで、L1 ... Lm は節である。
確定節：   ∀x...( ¬Q1 ∨ ... ∨ ¬Qn ∨ P)  、ここで、Q1 ... Qn と P は 原始論理式である。
ゴール節： ∀x...( ¬G1 ∨ ... ∨ ¬Gn)       、ここで、G1 ... Gn は 原始論理式である。
原始論理式：    p(x,y,z)



論理式 ：  L ∨ M ∨ N ...             、ここで、L M N ... は節である。
確定節：   ∀x...( ¬Q ∨ ¬R ... ∨ P)  、ここで、Q1 ... Qn と P は 原始論理式である。
ゴール節： ∀x...( ¬G ∨ ¬G ...)       、ここで、G1 ... Gn は 原始論理式である。
原始論理式：    p(x,y,z)



確定節は、 ¬X ∨ Y = X ⊃ Y を使って書き直すと Q ∧ R ∧ ...  ⊃ P
になる。これを

P :- Q, R, ... .

と書く。否定の原始論理式が1個の場合は、

P :- Q.

否定の原始論理式が0個の場合は、

P.

と書く。


ゴール節は、同様に G ∧ H ∧ ... ⊃ false になる。これを、

?- G, H, ... .

と書く。否定の原始論理式が1個の場合は、

?- G.

否定の原始論理式が0個の場合は、

?- true.

であり、自明なゴールである。


多くの場合、ゴール節は原始論理式ひとつだけの場合が多い。
直感的にいうと、確定節をならべた（またはで結んだ）プログラムに対して、

P1 :- Q1, R1, ... .       % 節L1 または
P2 :- Q2, R2, ... .       % 節L2 または
P3 :- Q3, R3, ... .       % 節L3 または
P4 :- Q4, R4, ... .       % 節L4 または
................................
Pm :- Qm, Rm, ... .       % 節Lm のとき、Gが成立することを証明する。

正確には、?- G (ゴールG すなわち ¬G) を反駁する、というのが正しいが、
そのことを意識することはない。



14.  まとめ

Prologでλ→の型検査のプログラムを書いてみた。
それ「だけ」で、型検査と型付け のどちらにも使える。

以上




















バックトラックとカットの話題は削除する。



3.3 実行例

?- member((f : X), [(g : 1), (f : 1), (h : 1), (g : 2), (f : 2), (h : 2)]).
↓
?- member((f : X), [(f : 1), (h : 1), (g : 2), (f : 2), (h : 2)]).
↓
true.                                                   最初の解 X = 1
全解を求めるためにバックトラックする。
                    ↓
    ?- member((f : X), [(h : 1), (g : 2), (f : 2), (h : 2)]).                
                    ↓
    ?- member((f : X), [(g : 2), (f : 2), (h : 2)]).
                    ↓
    ?- member((f : X), [(f : 2), (h : 2)]).
                    ↓
    true.                                               二番目の解 X = 2
    全解を求めるためにバックトラックする。
                              ↓
    ?- member((f : X), [(h : 2)]).
                              ↓
                              ↓
    ?- member((f : X), []).
                              ↓
    fail.                                               これ以上の解は無いので失敗する。



6. バックトラックの制限

member2(X, L) :-
        member(X, L), !.        /* member の定義は同じ。 */

?- member2(f(X), [g(1), f(1), h(1), g(2), f(2), h(2)]).
↓
?- member(f(X), [g(1), f(1), h(1), g(2), f(2), h(2)]), !.
↓
?- member(f(X), [f(1), h(1), g(2), f(2), h(2)]), !.
↓
!
true.                                                   最初の解 X = 1
全解を求めるためにバックトラックする。
                    ↓
                   fail.


補足説明：
member2の定義は以下と同じ。

（あ）member2が決定性述語であることを明確にする。
        大きなプログラムでは奨励される（かも）。

member2(X, [X | _]) :- !.
member2(X, [_ | L]) :- member2(X, L).


（い）if-then-else 制御構造を使う。実は（あ）の構文糖。

member2(X, [Y | L]) :-
  X = Y -> true ; member2(X, L).
  


問題(1) 変数の重なり

cons : bool -> list -> list
nil  : list
0    : bool
とする。

(λf:bool->list. λx:list. f x) (λx:bool. cons x nil) tm_true : list           []
(λf:bool->list. λx:list. f x) (λx:bool. cons x nil) : bool->list        []
(λf:bool->list. λx:list. f x) : (bool->list)->bool->list                 [x:bool]
λx:list. f x : (bool->list)                                             [f:bool->list]
f x : list                                                              [x:bool, f:bool->list]


[(f : nat->list), (x : list), (x : nat)]



内側のコンテキストと外側のコンテキストに同名の変数があっても、それが偶
然であるから、内側のコンテキストだけを取り出さないといけない。
つまり、memberの非決定性は不要である。

対策：カット！

getTypeFromContext(CTX, X, T) :-
    member((X : T), CTX), !.



4. Algorithm = Logic + Control
   
   強力（無節操）なユニフィケーションとバックトラックを「制御」する。
   
   双方向のユニフィケーション
   - occurs check

   無制限なバックトラック
   - cut operater     「証明木の枝を刈る」
   


(0) 値を返すため 3引数になる。
(1) falseの節は書かない。
    条件が満たされなければ失敗（fail すなわなち false とみなす）
(2) ユニフィケーションによる双方向性がある。
    Aが変数なら、変数に一致した結果をセットして返す。
(3) バックトラックにより全解を求める。
    (2)のとき、一致するものが複数ならをそのすべてを返す。
        



7. TAPLの getTypeFromContext


getTypeFromContext x ctx

コンテキスト ctx において、変数xの型を返す（日本語版p.87）。
TAPLでは、de Bruijn Index を使うが、ここでは一般的なλ式を使う。

let rec getTypeFromContext ctx x
  match ctx with
    | []              -> error   (* エラー *)
    | (x : t) :: _    -> t
    | _       :: ctx' -> getTypeFromContext ctx' x

一般的なλ式の場合、コンテキストは連想リストになる。
変数がxのとき、連想リストから (x : t) を探して、Tを返す。


